CONSOLE(CLI) - php yii
	Asset - управление Ассетами
	Cache - управление кеш хранилищами
	Fixture - данные для тестов
	Help - мини-справочник (по комментариям)
	Message - помощник переводов
	Migrate - управление миграциями БД
	Serve - встроенный мини веб-сервер
	
	pubf options($acID) {return ['message', 'user']}
	pubf optionAliases() {return ['v' => 'name']}
	php yii some-command --message=hello --user=GeekBrains

	php yii controller/action --option1=value -a=2 arg1 arg2


КЕШИРОВАНИЕ
	Yii::$app->cache->get()
	Yii::$app->cache->exists()

АЛИАСЫ
	public function aliases() { return ['m'=>'message', 'u'=> 'user'] }

ПЛАНИРОВАНИЕ ЗАДАЧ
	CRON GENERATOR && 	Supervisor

	/etc/cron.d/activity-notification
	MAILTO=''
	1 0 * * * nginx cf 	/data/mysite.local/app && /usr/bin/php yii activity-notify/sendout

WIDGET
	DetailView::widget
		'model' = $model
		'attributes'= ['id'=>'', 'name'=>'']
		'label'
		'value' - изменить значение
		'attribute' - выбрать аттрибут
		'repeat:boolean'
		:date, :time, :datetime
		'format'
		'pager'=> ['validatePage'=>false]
	GridView::widget([
		'dataProvider' => $provider	
		'colums' = 
		'options' - работа с css
		'class' => 'yii\grid\SerialColumn::class'
		'class' => 'ActionColums::class'
		'header' => 'Псевдо-порядковый номер'
				
ПОВЕДЕНИЯ
	- Timestamp Behavior
	- Blameable Behavior
	- Sluggable Behavior
	- Attribute Behavior
	- Attribute Typecast Behavior
	- Cacheable Behavior				
DATA PROVIDER
	ActiveDataProvider - запросы к БД через JQUERY и ActiveQuery c массивом или AR объектом
		'query'
		'pagination'
		'sort'
	SqlDataProvider - запросы к БД через SQL с результирующим массивом
	ArrayDataProvider - обработка большого массива с пагинацией и сортировкой
	
DB - 
	->createCommand('SELECT * FROM activities')
	->queryAll()
	->queryOne() - вернет первую строку в выборке вне зависимости от запроса
	->queryColumn() - вернет первый столбец
	->queryScalar() - вернет значение ячейки
	->bindValue() - биндинг одного параметра
	->bindValues() - биндинг нескольких параметров
	->bindParams() - биндинг по ссылке
	->batchInsert('activity', ['user_id', 'date_start'], [['5'=>date()], ['6'=>date()]]->execute()
		$params = [':activityId' => $_GET['id']]
	->createCommand->insert('activity', ['user_id'=>5, 'day_start'=>date()])->execute()
	->createCommand('SELECT * FROM post WHERE id=:id AND status=:status', $params)
	->createCommand(UPDATE activities SET user_id=5 WHERE id=1)->execute()

FORM 
	->field
	->hint
	->textInput(['autocomplete'=>off]),
	->->fileInput(['multiple' => true ])
	->textInput(['type'=>'date']
	->textarea['rows'=>5]
	->checkbox()
	

RBAC
	php yii migrate --migrationPath=@yii/rbac/migrations
	php yii rbac/init
	\Yii::$app->user->can('createActivity')
	
	$role = Yii::$app->authManager->getRole($name);
	$permit = Yii::$app->authManager->getPermission($permit);
	Yii::$app->authManager->addChild($role, $permit);


ACTIVE_RECORD
	$userActivities = Activity::find()->where(['id_user'=>123])->all()
	$someActivity = Activity::find($id) 
	public function tableName() {  return 'users'}
	
	isGuest()
	self::find()
	::findOne(['id'=>$id])
	->one() - ->all()
	$this->hasMany(Activity::className(), ['id_user'=> 'id']) // для пользователя USER
	$this->hasOne(User::className(), ['id'=> 'id_user']) // для событий ACTIVITY
	save()
	delete()
	refresh()
	afterFind()
	beforeValidate(),afterValidate()
	beforeSave(), afterSave()
	beforeDelete(), afterDelete()
	
USER
	Yii:$app->user
	->isQuest()
	->id
	->identity
	->login()
	->logout()
		
	->user->can('createActivity)
	
	$role = Yii:$app->authManager->getRole('role_name')
	$permit = Yii:$app->authManager->getPermission('permission_name')
	->authManager->addChild($role, $permit)
	
	php yii app/init
	
QUERY and QUERYBUILDER
	select('*')
	from
	all
	orderBy('id desc') - сортировка
	andWhere()	
	insert
	update
МИГРАЦИИ
	php yii migrate/new
	php yii migrate/create create_activities_table 
	php yii migrate/fresh
	
        методы миграций
	createTable(), renameTable(),
	dropTable(), dropTable()
	truncateTable() - очистка таблицы
	addColumn(), renameColumn(), 	alterColumn() - изменение свойств столбца
	addPrimaryKey(), addForeignKey(), dropForeignKey()
	createIndex(), dropIndex()
	
	$this->addForeignKey('ИМЯ КЛЮЧА', 'ИМЯ ТАБЛИЦЫ', 'ПОЛЯ', 
	'ВНЕШНЯЯ ТАБЛИЦА', 'СООТВЕТСТВУЮЩИЕ ВНЕШНИЕ ПОЛЯ', 'ФЛАГ КАСКАДНОГО УДАЛЕНИЯ');

	$this->createIndex('activity_user_index', 'activity', 'id_user');

	
TRANSACTION
	$db = Yii::$app->db;
	$myTransaction = $db->beginTransaction();
	try {
		$db->createCommand($sql1)->execute();
		$db->createCommand($sql2)->execute();
		$myTransaction->commit();
	}
	catch(\Throwable $e) {
		$myTransaction->rollBack();
	}
	
DAO
	public function getUserActivityData(){
		$id = $user->getId();
		$dao = new ActivityDao();
		$return $dao->getDataByUserId($id);
	}
	public function getDataByUserId(int $userId) {
		return Yii::$app->db->createCommand()->...
	}

UploadedFile::getInstances
VarDumper::export
strtotime() - преобразование в timestamp
attributes - передать аттрибуты модели
Yii::$app->security()->generateRandomString()
Yii::$app->security()->generatyPasswordHash()
